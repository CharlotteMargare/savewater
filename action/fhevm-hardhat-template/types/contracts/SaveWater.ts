/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface SaveWaterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getTopUsers"
      | "getTotalSaves"
      | "getUserCount"
      | "getUserRecord"
      | "getUserRecordsLength"
      | "getUserStreak"
      | "getUserTotalAmount"
      | "grantAccessForRecord"
      | "grantAccessForTotal"
      | "hasReachedAmountThreshold"
      | "protocolId"
      | "recordSave"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "WaterSaved"): EventFragment;

  encodeFunctionData(
    functionFragment: "getTopUsers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalSaves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserRecord",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserRecordsLength",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserStreak",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTotalAmount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantAccessForRecord",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantAccessForTotal",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasReachedAmountThreshold",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recordSave",
    values: [BigNumberish, BytesLike, BytesLike, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "getTopUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalSaves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserRecordsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserStreak",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTotalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantAccessForRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantAccessForTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasReachedAmountThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "recordSave", data: BytesLike): Result;
}

export namespace WaterSavedEvent {
  export type InputTuple = [
    user: AddressLike,
    timestamp: BigNumberish,
    amountClearOptional: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    timestamp: bigint,
    amountClearOptional: bigint
  ];
  export interface OutputObject {
    user: string;
    timestamp: bigint;
    amountClearOptional: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SaveWater extends BaseContract {
  connect(runner?: ContractRunner | null): SaveWater;
  waitForDeployment(): Promise<this>;

  interface: SaveWaterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getTopUsers: TypedContractMethod<
    [],
    [[string[], bigint[]] & { topUsers: string[]; counts: bigint[] }],
    "view"
  >;

  getTotalSaves: TypedContractMethod<[], [bigint], "view">;

  getUserCount: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getUserRecord: TypedContractMethod<
    [user: AddressLike, index: BigNumberish],
    [
      [bigint, bigint, string, bigint] & {
        timestamp: bigint;
        descriptionId: bigint;
        amount: string;
        streak: bigint;
      }
    ],
    "view"
  >;

  getUserRecordsLength: TypedContractMethod<
    [user: AddressLike],
    [bigint],
    "view"
  >;

  getUserStreak: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getUserTotalAmount: TypedContractMethod<
    [user: AddressLike],
    [string],
    "view"
  >;

  grantAccessForRecord: TypedContractMethod<
    [index: BigNumberish, grantee: AddressLike],
    [void],
    "nonpayable"
  >;

  grantAccessForTotal: TypedContractMethod<
    [grantee: AddressLike],
    [void],
    "nonpayable"
  >;

  hasReachedAmountThreshold: TypedContractMethod<
    [user: AddressLike, threshold: BigNumberish],
    [string],
    "nonpayable"
  >;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  recordSave: TypedContractMethod<
    [
      descriptionId: BigNumberish,
      encryptedAmount: BytesLike,
      proof: BytesLike,
      revealAmount: boolean
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getTopUsers"
  ): TypedContractMethod<
    [],
    [[string[], bigint[]] & { topUsers: string[]; counts: bigint[] }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalSaves"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserCount"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserRecord"
  ): TypedContractMethod<
    [user: AddressLike, index: BigNumberish],
    [
      [bigint, bigint, string, bigint] & {
        timestamp: bigint;
        descriptionId: bigint;
        amount: string;
        streak: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserRecordsLength"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserStreak"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserTotalAmount"
  ): TypedContractMethod<[user: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantAccessForRecord"
  ): TypedContractMethod<
    [index: BigNumberish, grantee: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "grantAccessForTotal"
  ): TypedContractMethod<[grantee: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "hasReachedAmountThreshold"
  ): TypedContractMethod<
    [user: AddressLike, threshold: BigNumberish],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "recordSave"
  ): TypedContractMethod<
    [
      descriptionId: BigNumberish,
      encryptedAmount: BytesLike,
      proof: BytesLike,
      revealAmount: boolean
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "WaterSaved"
  ): TypedContractEvent<
    WaterSavedEvent.InputTuple,
    WaterSavedEvent.OutputTuple,
    WaterSavedEvent.OutputObject
  >;

  filters: {
    "WaterSaved(address,uint256,uint256)": TypedContractEvent<
      WaterSavedEvent.InputTuple,
      WaterSavedEvent.OutputTuple,
      WaterSavedEvent.OutputObject
    >;
    WaterSaved: TypedContractEvent<
      WaterSavedEvent.InputTuple,
      WaterSavedEvent.OutputTuple,
      WaterSavedEvent.OutputObject
    >;
  };
}
